#!/bin/bash

configFile=$1
repeaters=( )

if [ -f "${configFile}" ]
then
	. "$configFile"
else
	echo "Please sepcify config file"
	exit 1;
fi

function parseLinkLine() {
	local linkLine="$1"
	local repeaterCall=${!2}
	local parsedRepeaterCall
	local parsedReflector
	local -n lorepeaterCall=$2
	local -n loreflector=$3

	local regex="[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}: (DCS|DExtra|DPlus){1} link - Type: (Repeater|Dongle) Rptr: ([0-9A-Z]{1,7}) {0,5}([A-Z]) Refl: ([0-9A-Z ]{1,7}[A-Z]) Dir: Outgoing"
	#2021-12-18 14:09:27: DPlus link - Type: Dongle Rptr: F5ZEE  C Refl: REF084 C Dir: Outgoing
	#2021-12-18 14:09:27: DCS link - Type: Repeater Rptr: F5ZEE  B Refl: DCS208 C Dir: Outgoing
	if [[ $linkLine =~ $regex ]]
	then
		parsedRepeaterCall="${BASH_REMATCH[3]}-${BASH_REMATCH[4]}"
		parsedReflector="${BASH_REMATCH[5]}"
		if [ "$repeaterCall" = "$parsedRepeaterCall" ]
		then 
			lorepeaterCall="$parsedRepeaterCall"
			loreflector="$parsedReflector"
			return 0
		fi
	fi
	return 1
}

function sendToAPRSIS() {
	
	local frame="$1>DSTAR:$2"
	# echo $frame
	tmpscript=`cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32`
	tmpscript="/tmp/"$tmpscript

	logintext="user $aprsLogin pass $aprsPasscode vers DStarLinkToAprsStatus 1.0"
	
	echo '#!/bin/bash' > $tmpscript
	echo "echo '$logintext'" >> $tmpscript
	echo "sleep 2" >> $tmpscript
	echo "echo '$frame'" >> $tmpscript
	chmod +x $tmpscript
	$tmpscript | socat - TCP:${aprsIsServer}
	rm -f $tmpscript	
}

function sendToAX25() {
	#make it a third party frame to accomodate for letters in SSID
	local frame="}$1>DSTAR,TCPIP,$ax25FromCall:$2"
	/usr/sbin/beacon -c $ax25FromCall -d "APRS $ax25DigiPath" -s $ax25Port "${frame}"
}

function sendStatus() {
	local repeaterCall=
	local reflector=
	local statusFrame=
	local -A statusFrames
	readarray -t linkLines <<< "`cat $linkLogPath`"
	#declare -p linkLines

	# fill staus frames with not linked frames
	for repeaterCall in "${repeaters[@]}"
	do
		statusFrames["$repeaterCall"]=">$repeaterCall not linked"
	done

	# Load all frames
	for linkLine in "${linkLines[@]}"
	do
		for repeaterCall in "${repeaters[@]}"
		do
			parseLinkLine "${linkLine}" repeaterCall reflector
			parseOk=$?
			if [ $parseOk -eq 0 ]
			then
				statusFrame=">$repeaterCall linked to $reflector"
				statusFrames["$repeaterCall"]="$statusFrame"
			fi
		done
	done

	declare -p statusFrames

	# send all frames
	for repeaterCall in "${!statusFrames[@]}"
	do
		statusFrame="${statusFrames[$repeaterCall]}"
		echo $statusFrame
		if [ "$useAprsIs" -eq 1 ]
		then
			sendToAPRSIS "${repeaterCall}" "${statusFrame}"
		fi
		if [ "$useAX25" -eq 1 ]
		then
			sendToAX25 "${repeaterCall}" "${statusFrame}"
		fi
	done
}

function parseIrcDDBGatewayConfig() {
	# This is a dirty hack. We grep the information we need from the ircddbgateway config file and source it as bash file
	grep -E "repeaterBand[1234]=|gatewayCallsign=" "$ircddbGatewayConfigPath" > /tmp/ircddbgatewayconfig
	. /tmp/ircddbgatewayconfig
	rm -f /tmp/ircddbgatewayconfig

	if [ ! -z "$repeaterBand1" ]
	then
		repeaters+=("$gatewayCallsign-$repeaterBand1")
	fi
	if [ ! -z "$repeaterBand2" ]
	then
		repeaters+=("$gatewayCallsign-$repeaterBand2")
	fi
	if [ ! -z "$repeaterBand3" ]
	then
		repeaters+=("$gatewayCallsign-$repeaterBand3")
	fi
	if [ ! -z "$repeaterBand4" ]
	then
		repeaters+=("$gatewayCallsign-$repeaterBand4")
	fi

	# declare -p repeaters
}

function main() {
	sendStatus
	inotifywait -q -m -e close_write $linkLogPath |
	while read -r filename event; do
		sendStatus
	done
}

parseIrcDDBGatewayConfig
main